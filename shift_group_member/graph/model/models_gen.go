// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AssignedShift struct {
	ID              string                     `json:"id"`
	Break           string                     `json:"break"`
	Color           string                     `json:"color"`
	StartTime       time.Time                  `json:"startTime"`
	EndTime         time.Time                  `json:"endTime"`
	Is24Hours       bool                       `json:"is24Hours"`
	Label           *string                    `json:"label,omitempty"`
	Note            *string                    `json:"note,omitempty"`
	ShiftToOffer    *AssignedShift             `json:"shiftToOffer,omitempty"`
	ShiftToSwap     *AssignedShift             `json:"shiftToSwap,omitempty"`
	ToSwapWith      *AssignedShift             `json:"toSwapWith,omitempty"`
	UserID          *string                    `json:"userId,omitempty"`
	ChannelID       *string                    `json:"channelId,omitempty"`
	ShiftGroupID    *string                    `json:"shiftGroupId,omitempty"`
	Type            *string                    `json:"type,omitempty"`
	IsOpen          *bool                      `json:"isOpen,omitempty"`
	IsShared        *bool                      `json:"isShared,omitempty"`
	ShiftActivities []*AssignedShiftActivities `json:"ShiftActivities,omitempty"`
	CreatedAt       *time.Time                 `json:"createdAt,omitempty"`
}

type AssignedShiftActivities struct {
	ID              string     `json:"id"`
	ChannelID       *string    `json:"channelId,omitempty"`
	ShiftGroupID    *string    `json:"shiftGroupId,omitempty"`
	AssignedShiftID string     `json:"assignedShiftId"`
	UserID          *string    `json:"userId,omitempty"`
	Name            *string    `json:"name,omitempty"`
	Code            *string    `json:"code,omitempty"`
	Color           *string    `json:"color,omitempty"`
	StartTime       time.Time  `json:"startTime"`
	EndTime         time.Time  `json:"endTime"`
	IsPaid          bool       `json:"isPaid"`
	CreatedAt       *time.Time `json:"createdAt,omitempty"`
}

type GetAllUniqueShiftsResponse struct {
	Message *string       `json:"message,omitempty"`
	Result  *UniqueShifts `json:"result,omitempty"`
	Status  *string       `json:"status,omitempty"`
}

type GetNonShiftGroupMembersResponse struct {
	Message *string `json:"message,omitempty"`
	Result  []*User `json:"result"`
	Status  *string `json:"status,omitempty"`
}

type GetShiftsByTaskResponse struct {
	Message *string        `json:"message,omitempty"`
	Result  []*ShiftGroups `json:"result,omitempty"`
	Status  *string        `json:"status,omitempty"`
}

type GetShiftsFilter struct {
	IncludeOpenShifts   *bool    `json:"includeOpenShifts,omitempty"`
	IncludeRequests     *bool    `json:"includeRequests,omitempty"`
	IncludeShifts       *bool    `json:"includeShifts,omitempty"`
	ShiftGroupIds       []string `json:"shiftGroupIds,omitempty"`
	ShiftGroupMemberIds []string `json:"shiftGroupMemberIds,omitempty"`
}

type GetShiftsResponse struct {
	Message *string `json:"message,omitempty"`
	Result  *Shifts `json:"result,omitempty"`
	Status  *string `json:"status,omitempty"`
}

type OpenShift struct {
	ID              string                 `json:"id"`
	ChannelID       *string                `json:"channelId,omitempty"`
	ShiftGroupID    *string                `json:"shiftGroupId,omitempty"`
	Break           *string                `json:"break,omitempty"`
	Color           *string                `json:"color,omitempty"`
	EndTime         *time.Time             `json:"endTime,omitempty"`
	Is24Hours       bool                   `json:"is24Hours"`
	Label           *string                `json:"label,omitempty"`
	Note            *string                `json:"note,omitempty"`
	Slots           *int                   `json:"slots,omitempty"`
	StartTime       *time.Time             `json:"startTime,omitempty"`
	ShiftActivities []*OpenShiftActivities `json:"ShiftActivities,omitempty"`
	CreatedAt       time.Time              `json:"createdAt"`
}

type OpenShiftActivities struct {
	ID           string     `json:"id"`
	ChannelID    *string    `json:"channelId,omitempty"`
	ShiftGroupID *string    `json:"shiftGroupId,omitempty"`
	OpenShiftID  string     `json:"openShiftId"`
	Name         string     `json:"name"`
	Code         *string    `json:"code,omitempty"`
	Color        *string    `json:"color,omitempty"`
	StartTime    time.Time  `json:"startTime"`
	EndTime      time.Time  `json:"endTime"`
	IsPaid       bool       `json:"isPaid"`
	CreatedAt    *time.Time `json:"createdAt,omitempty"`
}

type OpenShiftInfo struct {
	NumberOfShifts *int         `json:"numberOfShifts,omitempty"`
	Shifts         []*OpenShift `json:"shifts,omitempty"`
	Title          *string      `json:"title,omitempty"`
}

type ResponseStatus struct {
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}

type ShiftError struct {
	Code    ShiftErrorCode `json:"code"`
	Field   *string        `json:"field,omitempty"`
	Message *string        `json:"message,omitempty"`
}

type ShiftGroupMember struct {
	ID           string    `json:"id"`
	ChannelID    string    `json:"channelId"`
	ShiftGroupID string    `json:"shiftGroupId"`
	UserID       string    `json:"userId"`
	Position     *int      `json:"position,omitempty"`
	CreatedAt    time.Time `json:"createdAt"`
}

type ShiftGroupMemberAddResponse struct {
	Errors []*ShiftError `json:"errors"`
	User   *User         `json:"user,omitempty"`
}

type ShiftGroupMemberInput struct {
	ChannelID    string `json:"channelId"`
	ShiftGroupID string `json:"shiftGroupId"`
	UserID       string `json:"userId"`
}

type ShiftGroupMemberRemoveResponse struct {
	Errors []*ShiftError `json:"errors"`
	User   *User         `json:"user,omitempty"`
}

type ShiftGroups struct {
	GroupID   string  `json:"groupId"`
	GroupName string  `json:"groupName"`
	Shifts    *Shifts `json:"shifts,omitempty"`
	Position  *int    `json:"position,omitempty"`
}

type Shifts struct {
	AssignedShifts []*UserAssignedShifts `json:"assignedShifts"`
	OpenShifts     *OpenShiftInfo        `json:"openShifts"`
}

type UniqueShifts struct {
	AssignedShifts []*AssignedShift `json:"assignedShifts,omitempty"`
	OpenShifts     []*OpenShift     `json:"openShifts,omitempty"`
}

type User struct {
	ID              string                 `json:"id"`
	FirstName       string                 `json:"firstName"`
	LastName        string                 `json:"lastName"`
	Email           string                 `json:"email"`
	Avatar          *string                `json:"avatar,omitempty"`
	IsActive        bool                   `json:"isActive"`
	IsStaff         bool                   `json:"isStaff"`
	DateJoined      time.Time              `json:"dateJoined"`
	LanguageCode    string                 `json:"languageCode"`
	LastLogin       *time.Time             `json:"lastLogin,omitempty"`
	Metadata        map[string]interface{} `json:"metadata,omitempty"`
	Note            *string                `json:"note,omitempty"`
	PrivateMetadata map[string]interface{} `json:"privateMetadata,omitempty"`
	UpdatedAt       *time.Time             `json:"updatedAt,omitempty"`
}

type UserAssignedShifts struct {
	Image         *string          `json:"image,omitempty"`
	Name          string           `json:"name"`
	NumberOfHours int              `json:"numberOfHours"`
	Shifts        []*AssignedShift `json:"shifts,omitempty"`
	UserID        string           `json:"userId"`
}

type ShiftErrorCode string

const (
	ShiftErrorCodeGraphqlError ShiftErrorCode = "GRAPHQL_ERROR"
	ShiftErrorCodeInvalid      ShiftErrorCode = "INVALID"
	ShiftErrorCodeNotFound     ShiftErrorCode = "NOT_FOUND"
	ShiftErrorCodeRequired     ShiftErrorCode = "REQUIRED"
)

var AllShiftErrorCode = []ShiftErrorCode{
	ShiftErrorCodeGraphqlError,
	ShiftErrorCodeInvalid,
	ShiftErrorCodeNotFound,
	ShiftErrorCodeRequired,
}

func (e ShiftErrorCode) IsValid() bool {
	switch e {
	case ShiftErrorCodeGraphqlError, ShiftErrorCodeInvalid, ShiftErrorCodeNotFound, ShiftErrorCodeRequired:
		return true
	}
	return false
}

func (e ShiftErrorCode) String() string {
	return string(e)
}

func (e *ShiftErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShiftErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShiftErrorCode", str)
	}
	return nil
}

func (e ShiftErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
